<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 256">
  <defs>
    <style>
      .elevator-track {
        fill: none;
        stroke-width: 10px;
        stroke: #666;
        stroke-linecap: round;
      }
      .elevator-indicator {
        fill: none;
        stroke-width: 1px;
        stroke: #fff;
      }
    </style>
  </defs>

  <line id="track" class="elevator-track" x1="50" y1="128" x2="462" y2="128"/>
  <line id="indicator" class="elevator-indicator" x1="256" y1="100" x2="256" y2="156"/>

  <text x="10" y="40" style="font-family: Arial; font-size: 50px; font-weight: bold; fill: white;">Elevator</text>
  <text x="20" y="180" style="font-family: Arial; font-size: 20px; fill: white;">-100%</text>
  <text x="230" y="180" style="font-family: Arial; font-size: 20px; fill: white;">0%</text>
  <text x="410" y="180" style="font-family: Arial; font-size: 20px; fill: white;">+100%</text>

  <script type="text/javascript">
//<![CDATA[ // this is to make javascript work in the SVG, leave it alone

    function updateSVG(instrumentValue){
    // ========================================
    // STUDENT EDIT ZONE
    // This sections controls how the gauge displays
    // ========================================

    /**
     * Updates the elevator gauge display
     * - The vertical indicator line moves horizontally to show elevator position
     * - -100 = x position at left (50) - Full down
     * - 0 = x position at center (256) - Neutral
     * - +100 = x position at right (462) - Full up
     */

      // Calculate x position
      // Formula: 256 + (value / 100) * 206 to map -100 to +100 to 50-462
      const xPosition = 256 + (instrumentValue / 100) * 206;

      // Get the indicator line element
      const indicator = document.getElementById('indicator');
      if (!indicator) {
        console.log('Cant find element to animate');
        return;
      }

      // Update both x1 and x2 to move the vertical line horizontally
      indicator.setAttribute('x1', xPosition);
      indicator.setAttribute('x2', xPosition);


    // ========================================
    // END STUDENT EDIT ZONE
    // ========================================

    }


    setInterval(() => { // do this repeatedly

    // Check localStorage for updates
      const thisSVGfilename = window.location.pathname;
    // this SVG expects a localStorage with the same name as its file
      const localStorageName =  thisSVGfilename.substring(thisSVGfilename.lastIndexOf('/') + 1, thisSVGfilename.lastIndexOf('.'));
      let instrumentValue = localStorage.getItem(localStorageName);



    if (instrumentValue !== null) {
      // Make sure value is between -100 and +100
      instrumentValue = Math.max(-100, Math.min(100, instrumentValue));

    } else {
    // no localStorage, so make up a number, so it swings back and forth
    // Initialize static variables if they don't exist
    if (typeof window.testValue === 'undefined') {
      window.testValue = -100;
      window.testDirection = 1; // 1 for increasing, -1 for decreasing
    }

    // Update the test value
    window.testValue += window.testDirection * 2; // increment by 2 each time

    // Reverse direction at boundaries
    if (window.testValue >= 100) {
      window.testValue = 100;
      window.testDirection = -1;
    } else if (window.testValue <= -100) {
      window.testValue = -100;
      window.testDirection = 1;
    }

    instrumentValue = window.testValue;
    console.log('no local storage \"'+localStorageName+'\", using test value:', instrumentValue);

     }

    updateSVG(instrumentValue)



    }, 50);  //end of setInterval code.  50 is 50 milliseconds or 20 times per second.

  //]]> // this is to make javascript work in the SVG, leave it alone
  </script>
</svg>
